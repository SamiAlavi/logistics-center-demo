version: '3.5'

services:

# ============================================================================
# ============================================================================
#                           AUTOTRUCK-TRUCKTRIX WEB APP
# ============================================================================
# ============================================================================

    yard_automation_app:
        image: autotruck/autotruck_webclient:2.2.0
        platform: linux/amd64

        ports: 
            - "3080:3080"            
                
        command: ["node", "express.js"]

        networks:
            - ${NETWORK_NAME}


# ============================================================================
# ============================================================================
#                  LOCAL PATH PLANNER - WHEN TRUCKTRIX IS NOT AVAILABLE
# ============================================================================
# ============================================================================

    local_planner_service:
        build: 
            context: ./microservices/clothoid_path_planner
            dockerfile: Dockerfile
            target: ${TARGET:-prod}

        container_name: local_planner_service

        ports:
            - "9000:9000"
            - "5680:5680"

        restart: always

        networks:
            - ${NETWORK_NAME}

        volumes:
            - ./microservices/clothoid_path_planner/:/app


# ============================================================================
# ============================================================================
#                  AUXILIAR ASSIGNMENT PLANNER - TO HANDLE TRAILER TRANSPORTATION
# ============================================================================
# ============================================================================

    trailer_transport_service:
        build: 
            context: ./microservices/trailer_transport_planner
            dockerfile: Dockerfile
            target: ${TARGET:-prod}

        container_name: trailer_transport_service

        ports:
            - "9100:9100"
            - "5681:5681"

        restart: always

        networks:
            - ${NETWORK_NAME}

        volumes:
            - ./microservices/trailer_transport_planner/:/app


    pick_drop_park_service:
        build: 
            context: ./microservices/pick_drop_service
            dockerfile: Dockerfile
            target: ${TARGET:-prod}

        container_name: pick_drop_park_service

        ports:
            - "9200:9200"
            - "5682:5682"

        restart: always

        networks:
            - ${NETWORK_NAME}

        volumes:
            - ./microservices/pick_drop_service/:/app


    map_service:
        build: 
            context: ./microservices/simplejson_map_server
            dockerfile: Dockerfile
            target: ${TARGET:-prod}

        container_name: map_service

        ports:
            - "9300:9300"
            - "5683:5683"

        restart: always

        networks:
            - ${NETWORK_NAME}

        volumes:
            - ./microservices/simplejson_map_server/:/app


# # ============================================================================
# # ============================================================================
    # #                       TRUCK SIMULATOR - TRUCK AND TRACTOR 
# # ============================================================================
# # ============================================================================

    agent_simulator_1:
        image: helyosframework/helyos_agent_slim_simulator:0.8.2
        platform: linux/amd64

        volumes:
            - ./geometry_tractor.json:/app/customization/geometry.json
            
        environment:            
            - UUID=Ab34069fc5-fdgs-434b-b87e-f19c5435113 # AGENT ID
            - ASSIGNMENT_FORMAT=trajectory  # fixed | trajectory | straight_to_destination | trucktrix-path 
            - NAME=MY_TRACTOR
            - X0=-28000
            - Y0=29000
            - ORIENTATION=0.329
            - VELOCITY=3.6
            - YARD_UID=EM01
            - UPDATE_RATE=10

            # RABBITMQ 
            - RBMQ_HOST=${RBMQ_HOST} 
            - RBMQ_PORT=${RBMQ_PORT}
            - REGISTRATION_TOKEN=${RBMQ_REGISTRATION_TOKEN}

        networks:
            - ${NETWORK_NAME}   

        depends_on:
            - ${HELYOS_NAME}     

        command: ["python", "-u", "main.py"]

        deploy:
            restart_policy:
                condition: on-failure
                delay: 15s
                max_attempts: 5
                window: 60s    


    agent_simulator_2:
        image: helyosframework/helyos_agent_slim_simulator:0.8.2
        platform: linux/amd64

        volumes:
            - ./geometry_tractor.json:/app/customization/geometry.json
            
        environment:
            - UUID=Bb34069fc5-fdgs-434b-b87e-f19c5435113 # AGENT ID
            - ASSIGNMENT_FORMAT=trajectory  # fixed | trajectory | straight_to_destination | trucktrix-path
            - NAME=MY_TRUCK
            - X0=-30000
            - Y0=10000
            - ORIENTATION=0.329
            - VELOCITY=3.6
            - YARD_UID=EM01
            - UPDATE_RATE=10

            # RABBITMQ 
            - RBMQ_HOST=${RBMQ_HOST} 
            - RBMQ_PORT=${RBMQ_PORT}
            - REGISTRATION_TOKEN=${RBMQ_REGISTRATION_TOKEN}

        networks:
            - ${NETWORK_NAME}   

        depends_on:
            - ${HELYOS_NAME}     

        command: ["python", "-u", "main.py"]

        deploy:
            restart_policy:
                condition: on-failure
                delay: 15s
                max_attempts: 5
                window: 60s    


# # ============================================================================
# # ============================================================================
# #                          MESSAGE-BROKER - RABBITMQ 
# # ============================================================================
# # ============================================================================

    local_message_broker:
        image:  rabbitmq:3-management

        hostname: ${RBMQ_HOST}

        ports: 
            - "${RBMQ_PORT}:${RBMQ_PORT}"          
            - "${RBMQ_API_PORT}:${RBMQ_API_PORT}"

        volumes:
            - rbmq_data:/var/lib/rabbitmq/mnesia/

        networks:
            - ${NETWORK_NAME}


# # =================================================================================
# # =================================================================================
# #     MOCKING EXTERNAL RESOURCE MANAGER TO PROVIDE TRAILERS AND CONTAINERS POSITION
# # =================================================================================
# # =================================================================================

    external_resource_manager:
        image:  python:3.7-slim

        volumes:
            - ./register_trailers_to_yard.py:/app/register_trailers_to_yard.py
            - ./geometry_trailer.json:/app/geometry_trailer.json

        working_dir: /app

        command: ["python", "-u", "/app/register_trailers_to_yard.py"]

        depends_on:
            - ${HELYOS_NAME}

        networks:
            - ${NETWORK_NAME}


# # ============================================================================
# # ============================================================================
# #                           HELYOS - SYSTEM INTEGRATION
# # ============================================================================
# # ============================================================================

    db:
        image: postgres:14
        
        container_name: ${POSTGRES_HOST}

        ports:
            - "${POSTGRES_PORT}:${POSTGRES_PORT}"
        
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        
        environment:
            - POSTGRES_HOST_AUTH_METHOD=trust
            - POSTGRES_DB=${POSTGRES_HOST}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - PGPORT=${POSTGRES_PORT}
        
        networks:
            - ${NETWORK_NAME}


    helyos_core:
        image: helyosframework/helyos_core:2.2.0
            
        container_name: ${HELYOS_NAME}

        ports:
            - "5002:5002"  # Websocket
            - "${GQL_PORT}:${GQL_PORT}"  # GraphQL
            - "8080:8080"  # HelyOS Dashboard

        volumes:
            - ./settings/config:/etc/helyos/config/
            - ./settings/db_initial_data/:/etc/helyos/db_initial_data/
            - ./settings/rsa_keys/helyos_private.key:/etc/helyos/.ssl_keys/helyos_private.key:ro
            - ./settings/rsa_keys/helyos_public.key:/etc/helyos/.ssl_keys/helyos_public.key:ro

        environment:
            # DATABASE 
            - PGUSER=${POSTGRES_USER} 
            - PGPASSWORD=${POSTGRES_PASSWORD}
            - PGHOST=${POSTGRES_HOST} 
            - PGDATABASE=autotruck 
            - PGPORT=${POSTGRES_PORT}
            - DB_BUFFER_TIME=1000
            
            # GRAPHQL VARIABLES
            - GQLPORT=${GQL_PORT}

            # RABBITMQ 
            - RBMQ_HOST=${RBMQ_HOST} 
            - RBMQ_PORT=${RBMQ_PORT}
            - RBMQ_API_PORT=${RBMQ_API_PORT}     
            - TTL_VISUAL_MSG=500  
            - TTL_STATE_MSG=2000
            - MESSAGE_UPDATE_LIMIT=10
            - MESSAGE_RATE_LIMIT=50


            # RBMQ ACCOUNTS
            - CREATE_RBMQ_ACCOUNTS=True
            - RBMQ_ADMIN_USERNAME=${HELYOS_RBMQ_USERNAME} # set if CREATE_RBMQ_ACCOUNTS is True
            - RBMQ_ADMIN_PASSWORD=${HELYOS_RBMQ_PASSWORD} # set if CREATE_RBMQ_ACCOUNTS is True
            - AGENT_REGISTRATION_TOKEN=${RBMQ_REGISTRATION_TOKEN}

        networks:
            - ${NETWORK_NAME}

        depends_on:
            - ${POSTGRES_HOST}
            - ${RBMQ_HOST}


networks:
    control-tower-net:
       external: false
       name: ${NETWORK_NAME}


volumes:
    postgres_data:
        external: false

    rbmq_data:
        external: false